{"config":{"lang":["zh","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my notes","text":"<p>Warning</p> <p>This wiki is still under construction. Stay tuned.</p>"},{"location":"#intro","title":"Intro","text":"<p>This wiki aims to help to teach yourself the CS courses in SUSTech, and also severs as a backup for the course materials.</p> <p>CS major in SUSTech is a bit hard for those who have no background in computer science, but it's not enough for those who want to learn computer science seriously. However, as long as you have some self-learning ability, these courses are all self-taught.</p> <p>Note</p> <p>Due to my preference for system security, I did not (and will neither) enroll most of the AI related courses like Machine Learning (CS401) and Intelligent Robotics (CS405). Sorry for not covering them. Please refer to other repos for those courses. Or if you'd like to contribute, please feel free to do so.</p>"},{"location":"#structure","title":"Structure","text":"<p>The wiki is organized according to the course leve, which are basis, core and elective.</p> <ul> <li>Basis: The basic courses for CS major, including the math courses, the programming courses and the data structure courses.</li> <li>Core: The core courses for CS major, including the algorithm courses, the system courses and the software engineering courses.</li> <li>Elective: The elective courses for CS major, including the computing theory, security and AI.</li> </ul> <p>Mostly, assignments, notes and reports are written in Typst or \\(\\LaTeX\\).</p> <p>The notes can be viewed on my blog. I haven't written any, though.</p>"},{"location":"#how-to-learn-with-the-wiki","title":"How to Learn with the wiki","text":"<p>Note</p> <p>If you'd like to download folder(s) of specific course, Downgit is a suitable tool for you.</p> <p>TBD</p>"},{"location":"basis/CS109/","title":"Introduction to Programming in Java (CS109)","text":"<p>SUSTech <code>CS109</code> is a course of programming in <code>Java</code>, intended for the freshmen undergraduate.</p> <p>Warning</p> <p>Any use of my code is allowed, while COPING and SUBMITTING to the OJ is highly prohibited. DON'T ruin yourself.</p>"},{"location":"basis/CS109/#about","title":"About","text":"<p>The folder contains two semsester's materials. In the first semsester, I was a student of the course, and in the second semsester, I was a student assistant. The course is taught by two professors, and the course content is largely the same.</p> <p>Note</p> <p>Instructor: <code>Zhuozhao Li (\u674e\u5353\u948a)</code></p> <p>Semester: <code>2022 Fall</code></p> <p>We have a lab(LAB) every week and professor only requires us to submit one exercise(E)</p> <p>Note</p> <p>Instructor: <code>Fengwei Zhang (\u5f20\u950b\u5dcd)</code></p> <p>Semester: <code>2023 Spring</code></p> <p>I served as student assistant at the Spring of 2023. Assignment 4 and 5 will be filled up if u raise an issue.(</p>"},{"location":"basis/CS109/#content","title":"Content","text":"<p>This folder collects my code for the assignment and practice in laboratory, and also contains my humble thoughts of the problem, which I post on github to share with you. If you've solved the problem, welcome to check my method. And if you have trouble solving the problem, my code may provide you with some hints.</p>"},{"location":"basis/CS201/","title":"Discrete Math (CS201)","text":"<p>The course introduces the necessary mathematics knowledge for computer science. The scope spreads widely and therefore, it might not dive in too much. Don't let the flood of concepts and proofs scare you. The best way to learn discrete math is to read the slides carefully and know the steps to solve the homework by heart.</p>"},{"location":"basis/CS201/#about","title":"About","text":"<ul> <li>Instructor: <code>Shan CHEN (\u9648\u6749)</code></li> <li>Semester: <code>2023 Fall</code></li> <li>Textbook: <code>Discrete Mathematics and Its Applications</code></li> </ul> Chapter Content Note Logic and Proofs Propositional LogicPredicate LogicProof and Logic Equivalence Most Abstract PartFollow the Logic Sets and Functions Sets and CardinalityFunctionSequence and SummationCountability of Sets Proof Matters Complexity of Algorithms GrowthComplexityP, NP, NPC and NP Hard Concepts and Analysis of Algorithm Number Theory and Cryptography Divisibility and ModularPrime and (extended) GCDCongruence and InvertChinese Remainder TheoremEuler's TheoremFermat's Little TheoremRSA and DH Key Exchange Hardest PartComputing and Proofs of the Theorem Induction and Recursion Mathematical InductionRecurrencesMaster TheoremDivide and Conquer Proof by InductionExpand Recusive Expression Counting Basic RulesBinomial Coefficients and IdentitiesInclusion and ExclusionLinear Recurrence EquationGenerating Functions Calculation Matters Relation PropertiesClosure\\(n\\)-ary RelationOrdering and Comparability Proof Matters Graph and Trees Basic Concepts and PropertiesRepresentation and IsomorphismConnectivityEuler and Hamilton PathsPlanarColoringShortest PathTrees and MST The most useful partSimilar to the content of DSAA (CS 203)"},{"location":"basis/CS201/#project","title":"Project","text":""},{"location":"basis/CS201/#exam","title":"Exam","text":"<p>Well, professor Chen won't leak any exam questions, however, the exam comes mostly from the homework and the slides. If you'd like to do some exam questions, refer to wLUOw's repo</p>"},{"location":"basis/CS202/","title":"Computer Organization (CS202)","text":""},{"location":"basis/CS202/#about","title":"About","text":"<ul> <li>Instructor: <code>Yuhui BAI (\u767d\u96e8\u5349)</code></li> <li>TA: <code>Qing WANG (\u738b\u6674)</code></li> <li>Semester: <code>2024 Spring</code></li> <li>Textbook: <code>Computer Organization and Design: The Hardware/Software Interface</code></li> </ul>"},{"location":"basis/CS202/#content","title":"Content","text":"Lecture Topic Note lec1 Syllabus and Overview Intro to the principles of computer processor lec2 ISA, RISC-V and Intro to Assembly RISC-V is an ISA (Instruction Set Architecture)Programming in RISC-V Assembly Code lec3 Control Flow and Stack Direct and Conditional BranchCalling Convention in RISC-V lec4 Binary Format Structure of RISC-V Machine Code lec5 Performance Measurement Calculation of Processor's Performance: CPI and SPEC lec6 Execution of Integers Add, Substraction, Multiplication and Division lec7 Float Point Number (Decimal) Arithmetic Standard for Float and DoubleAdd/Sub, Mul/Div of FPMatrix Operation, SIMD lec8 Single-Cycle Processor Design Elements in CPUData PathClocking Methodology lec9 Pipelined CPU Design Stage RegisterHazards and Solution lec10 Instruction-Level Parallelism Statical Multi-issue DesignLoop UnrollingHazards lec11 Intro to Cache Functions and Strategies of Direc-Mapped Cache lec12 Cache Cont'd N-way Set Associative CacheFull Associative CacheEfficiency MeasurementMulti-Level Cache lec13 Virtual Memory Page TableAddress TranslationReplacement &amp; TLB lec14 Multi-Core Concepts Calculation of Multi-Core SpeedupMultithreadingIntro to GPU <p>Summary: Processor, Memory, Parallel. Design and Data Path, every detail matters.</p>"},{"location":"basis/CS202/#project","title":"Project","text":"<p>The project topic remains the (possibly) forever, to build a CPU from scratch. Though the codes are available online, it's strongly recommended to write your own without referring to any existing code. General steps are as follows:  1. Understanding the design of single-cycle CPU from the textbook but I won't suggest referring it due to the flaws in that design.  2. Based on your understanding, draw the figure of your CPU from scratch, which means to redesign the datapath within your mind without referring the textbook, on paper or using any software like draw.io.  3. Pay attention to the scalability of your design, i.e., how to extend the ISA esaily in your design. And you will know why textbook is wrong.  4. Try implemeting the full version of RV32I, or it'll be hard to extend the ISA in the future since it requires to modify the design heavily.  5. On the basis of well-functioning, try to optimize the design, like pipelining, hazard handling, cache, branch prediction, etc.</p> <p>Have fun with your CPU design!</p>"},{"location":"basis/CS203/","title":"Data Structure and Algorithm Analysis (CS207)","text":"<p>The problems can be viewed at ACM OJ, BUT it should be restricted to student-only for now.</p>"},{"location":"basis/CS203/#about","title":"About","text":"<ul> <li>Instructor: <code>Bo Tang (\u5510\u535a)</code></li> <li>TA: <code>Yun Shen (\u6c88\u6600)</code></li> <li>Semester: <code>Fall 2023</code></li> <li>Textbook: <code>Data Structures and Algorithm Analysis in C++ (4th Edition)</code></li> </ul>"},{"location":"basis/CS203/#content","title":"Content","text":"<p>The course contains only two parts, theory and lab. Project is excluded and the assignment is to finish all labs.</p>"},{"location":"basis/CS203/#theory","title":"Theory","text":"<p>For quiz, midterm and final exams.</p> Lecture Content Duration Introduction Intro to Data Structure and Algorithm 1 week Binary Search Complexity Analysis and Binary Search 2 weeks Sort Bubble Sort, Merge Sort and Quick Sort 2 weeks Linked List Linked List and doubly Linked List 1 week Stack and Queue Stack, Queue, Ring Queue and Deque 1 week String KMP, Robin-Karp and FSM 1 week Tree Intro to Tree and Advanced Tree 2 weeks Graph Intro to Graph and Advanced Graph 2 weeks"},{"location":"basis/CS203/#lab-exercise","title":"Lab Exercise","text":"<p>Warning</p> <p>The source codes are only for learning purpose. DON'T copy directly and submit to OJ, which might ruin you. Try understanding the idea, if trapped, feel free to contact me.</p> <p>There're 10 labs in total and 6 problems for each lab with (15 + 15 + 20 + 20 + 25 + 25) points.</p>"},{"location":"basis/CS207/","title":"Digital Design (CS207)","text":"<p>Introduction to digital circuit design and analysis, along with programming in Verilog to describe the circuit for simulation and running on FPGA.</p>"},{"location":"basis/CS207/#about","title":"About","text":"<ul> <li>Instructor: <code>Yuhui BAI (\u767d\u96e8\u5349)</code></li> <li>TA: <code>Wei WANG (\u738b\u8587)</code></li> <li>Semester: <code>2023 Fall</code></li> <li>Textbook: <code>Digital Design with an Introduction to the Verilog HDL</code></li> </ul>"},{"location":"basis/CS207/#content","title":"Content","text":"Chapter Content Note Number System Radix ConversionComplement of numberCode: BCD, Gray, Error DetectionSigned Binary \\(r\\)'s Complement\\(r-1\\)'s Complement Boolean Algebra Properties of AND and ORTruth TableSimplificationCanonical and Standard form SOPPOSMintermMaxterm Gate Level Minimization K-mapDon't care condition Simplification Method Two Level Implementation AND-OR = NAND-NAND = SOPOR-AND = NOR-NOR = POSNAND-AND = AND-NOR = AOIOR-NAND = NOR-OR = OAI The last two are generated from the invert of the first two Combinational Logic Design and Analysis of Circuit Truth Table -- K Map -- Simplified Equation -- Diagram Standard Components DecoderMultiplexerEncoder Implementation and Usage of them Latches and Flip-Flops SR / D LatchSR / D / JK / T Flip-Flops Input equation and function tables Sequential Logic Design and Analysis of Finite State Machine (Moore &amp; Mealy) State Diagram -- State Table -- State Equation and Output Equation -- Choose FF and Input Equation -- Diagram Registers and Counters Serial and Parallele RegisterSynchronous and Aschronous Counter Function Table and Sequence Generator Arithmetic Circuit Binary Adder-SubtractorDecimal AdderMultiplier Combination of the Components"},{"location":"basis/CS208/","title":"Algorithm Design and Analysis (CS208)","text":""},{"location":"basis/CS208/#about","title":"About","text":"<ul> <li>Instructor: <code>Yuhui SHI (\u53f2\u7389\u56de)</code></li> <li>TA: <code>Lei TIAN (\u7530\u857e)</code></li> <li>Semester: <code>2024 Spring</code></li> <li>Textbook: <code>Algorithm Design</code></li> </ul>"},{"location":"basis/CS208/#content","title":"Content","text":"Lecture Topic Content 1 Introduction and Recursion 2 3 4 5 6 7 8 9 10 11 12 <p>Labs proceed right with the lecture.</p>"},{"location":"basis/CS208/#project","title":"Project","text":"<p>Project unavailable in ALL algorithm courses of CS department in SUSTech.</p>"},{"location":"basis/CS307/","title":"Database System (CS307)","text":"<p>The content of this course is actually about how to use the database and principles to design the tables and customized functions. It will not deep into the principles of database and teach you how to build a database system from scratch neither.</p>"},{"location":"basis/CS307/#about","title":"About","text":"<ul> <li>Instructor: <code>Ran CHENG (\u7a0b\u7136)</code></li> <li>TA: <code>Weiyu Wang (\u738b\u7ef4\u8bed)</code></li> <li>Semester: <code>2023 Fall</code></li> <li>Textbook: <code>Database System Concepts</code></li> </ul>"},{"location":"basis/CS307/#content","title":"Content","text":"Chapter Content Note Database Design Intro to SQL (Structure Query Language)1-3 Normal FormEntity-Relation Diagram SQL DDL (Data Definition Language)DML (Data Manipulation Language)Data TypeConstraintQuery and SubqueryAggregate FunctionJoinWindow Function Function and Trigger Transaction Relational Algebra Index"},{"location":"core/CS302/","title":"Operating System (CS302)","text":"<p>The course introduces the concepts of operating system and adapts the uCore OS codes authored by THU in lab practice.</p>"},{"location":"core/CS302/#about","title":"About","text":"<ul> <li>Instructor: <code>Yinqian ZHANG (\u5f20\u6bb7\u4e7e)</code></li> <li>TA: <code>Yun SHEN (\u6c88\u6600)</code></li> <li>Semester: <code>2024 Spring</code></li> <li>Textbook: <code>Operating System Concepts</code></li> </ul>"},{"location":"core/CS302/#content","title":"Content","text":"Lecture Topic Content"},{"location":"core/CS302/#labs","title":"Labs","text":"<p>Essence of the course, try to finish the lab with best effort.</p>"},{"location":"core/CS302/#project","title":"Project","text":"<p>Project unavailable. You can try to comtribute to the uCore project.</p>"},{"location":"core/CS303/","title":"Artificial Intelligence (CS303)","text":"<p>The course</p>"},{"location":"core/CS303/#about","title":"About","text":"<ul> <li>Instructor: <code>Ke Tang (\u5510\u73c2)</code></li> <li>Semester: <code>2024 Fall</code></li> <li>Textbook: ``</li> </ul>"},{"location":"core/CS303/#content","title":"Content","text":"<p>TBD</p>"},{"location":"core/CS305/","title":"Computer Networks (CS305)","text":"<p>Principles of computer networks, including the mechanisms and protocols of Internet, from theory to practice. Will also cover hands-on practices on network programming and related tools &amp; commands.</p>"},{"location":"core/CS305/#about","title":"About","text":"<ul> <li>Instructor: <code>Ming TANG (\u5510\u8317)</code></li> <li>TA: <code>Qing WANG (\u738b\u6674)</code></li> <li>Semester: <code>2023 Fall</code></li> <li>Textbook: <code>Computer Networking A Top Down Approach, 7th</code></li> </ul>"},{"location":"core/CS305/#theory","title":"Theory","text":"<p>The course introduces the OSI 5 Layer concept</p> Layer Content Note Network Core Packet SwitchingCircuit SwitchingLatency and Throughput Computing Latency Application HTTP/HTTPSSMTPPOPDNSP2P BittorrentVideo Stream Formats, Characteristics and Features. Transport Reliable Data Transfer ConceptTCPUDP Hardest Part Focus on the details of RDT and TCP. Congestion control algorithm Network RouterData Plane (IP, NAT)Control Plane (Routing, OSPF, BGP)ICMPSDN Link SwitchLANAddressingWireless"},{"location":"core/CS321/","title":"Group Project (CS321)","text":""},{"location":"core/CS321/#about","title":"About","text":""},{"location":"elective/CS104/","title":"Introduction to Mathematical Logic (CS104)","text":"<p>The course introduces the necessary concepts of mathematical logic in computer science.</p>"},{"location":"elective/CS104/#about","title":"About","text":"<ul> <li>Instructor: <code>Mingxin He (\u4f55\u660e\u6615)</code></li> <li>Semester: <code>2023 Spring</code></li> <li>Textbook: <code>Introduction To Logic, 14th edition, Copi&amp;Cohen</code></li> </ul>"},{"location":"elective/CS104/#content","title":"Content","text":"Chapter Content Note Introduction OverviewInference RulesSyntax Parsing Lots of rules to remember :( Natural Deduction Derivations and proofsSemantics and Truth Table Know how to prove the sequent Formal Proof Rules and ProofsEquivalenceNormal FormsSATResolutions with Completeness Lots of concepts :( First Order Logic Rules &amp; Formal  Proof in FOLSubstitutionCNFTerms and UnificationResolution Qualifiers matter Program Verification Assignment &amp; ArrayConditionLoopCorrectness Hard to write a programEven harder to prove its correctness"},{"location":"elective/CS104/#exam","title":"Exam","text":"<p>The test problems are similar to the assignments. It's allowed to bring a hand-written cheatsheet in A4 size.</p>"},{"location":"elective/CS301/","title":"Embedded System and Microcomputer Principle (CS301)","text":"<p>The course</p>"},{"location":"elective/CS301/#about","title":"About","text":"<ul> <li>Instructor: <code>Yuhui Bai (\u767d\u96e8\u5349)</code></li> <li>Semester: <code>2024 Fall</code></li> <li>Textbook: <code>NO Textbook, only references</code></li> </ul>"},{"location":"elective/CS301/#content","title":"Content","text":"<p>TBD</p>"},{"location":"elective/CS309/","title":"Object-Oriented Analysis and Design (CS309)","text":"<p>The course</p>"},{"location":"elective/CS309/#about","title":"About","text":"<ul> <li>Instructor: <code>Yuqun Zhang (\u5f20\u715c\u7fa4)</code></li> <li>Semester: <code>2024 Fall</code></li> <li>Textbook: ``</li> </ul>"},{"location":"elective/CS309/#content","title":"Content","text":"<p>TBD</p>"},{"location":"elective/CS323/","title":"Compiler Principle (CS323)","text":"<p>The course</p>"},{"location":"elective/CS323/#about","title":"About","text":"<ul> <li>Instructor: <code>Yepang Liu (\u5218\u70e8\u5e9e)</code></li> <li>Semester: <code>2024 Fall</code></li> <li>Textbook: <code>Compilers: Principles, Techniques, and Tools (The Dragon Book)</code></li> </ul>"},{"location":"elective/CS323/#content","title":"Content","text":"<p>TBD</p>"},{"location":"elective/CSE5014/","title":"Cryptography and Network Security (CSE5014)","text":"<p>This course is a graduate-level course on cryptography and network security. The course is designed to provide a comprehensive understanding of the principles and techniques of cryptography.</p>"},{"location":"elective/CSE5014/#about","title":"About","text":"<ul> <li>Instructor: <code>Qi WANG (\u738b\u7426)</code></li> <li>Semester: <code>2024 Spring</code></li> <li>Textbook: <code>Introduction to Modern Cryptography</code></li> </ul>"},{"location":"elective/CSE5014/#content","title":"Content","text":"Lecture Topic Note lec1 Ancient Cryptography CaesarSubstitution Cipher lec2 Definition of Perfect Secrecy Proof of the equivalence of the definitions lec3 OTP &amp; Limitation of Perfect Secrecy One-Time-PadStatistical SecurityIndistinguishability lec4 Computational Security PPTCPA lec5 Pseudorandomness PRGPRFPRP lec6 Block Cipher &amp; CPA Security DESCTR ModeCBC Mode lec7 Stream Cipher &amp; CCA Security CCAPadding Oracle AttackMAC lec8 MAC &amp; Security Definition of ForgeCBC-MACAtEEtA lec9 Hash Function &amp; Security Definition of Collision-ResistentBirthday Attack lec10 Private-Key Encryption Scheme SPNFiestel NetworkAvalanche EffectAESMeet-in-the-middle Attack lec11 Random Oracle &amp; Abstract Algebra Intro FieldGroupRingPermutation Group lec12 Public-Key Cryptography RSA ProblemTrapdoor FunctionDiscrete Logarithm lec13 Discrete Logarithm Diffie-HellmanCDHDDH lec14 Public-Key Encryption Scheme CPA/CCA in Public-KeyEl GamalPKCS lec15 Digital Signature &amp; Security Definition of Digital SignatureMAC vs. Digital SignatureRSA-FDHReplay Attack lec16](./Slides/lec16.pdf) Zero Knowledge Proof &amp; Homomorphic Encryption DefinitionQuadratic Residue"},{"location":"elective/CSE5014/#assignment-exam","title":"Assignment &amp; Exam","text":"<p>[!NOTE] My final review can be found here.</p> <p>The assignments cover the topics mentioned in the content section. The questions in the final exam will mostly be the same as the assignments. The final exam will not cover the last two lectures.</p>"},{"location":"other/SS149/","title":"Modern Western Philosophy (SS149)","text":"<p>This course is not computer related but essential for science thinking. Though the final grade is not satisfying, I learnt a lot from this course. The instructor is a analytic philosopher, so the course might seem boring and tough for some students. Well, all philosophy courses are tough and mind-blowing.</p>"},{"location":"other/SS149/#about","title":"About","text":"<ul> <li>Instructor: <code>Takaharu Oda (\u5c0f\u7530\u5d07\u6674)</code></li> <li>Semester: <code>2024 Spring</code></li> <li>Textbook: See Materials</li> </ul>"},{"location":"other/SS149/#content","title":"Content","text":"<p>The content is divided into two parts: 17-th century and 18-th century, both take 7 weeks.</p> Week Topic Overview 1 Introduction Intro to logic and analytic philosophy 2 Descartes 1 Meditation 1-3: Argument for sceptical hypothesis, Wax argument, and argument for the existence of God 3 Descartes 2 Meditation 5-6: Argument about judgement, ontological argument, conceivability argument and argument for bodily causation 4 Spinoza and Leibniz Defense and objection to final causation 5 Leibniz and Cavendish Argument for motion of matter 6 Cavendish and Malebranche Panpsychism and Occasionalism 7 Locke and Astell and Part I Conclusion The nature and origin of idea, argument for knowledge and judgement and conclusion of 17-th century 8 Berkeley 1 Occasional causation 9 Berkeley 2 Berkeley's response to objection 10 Berkeley 3 Argument of the Three Dialogues 11 Berkeley 4 Theories of causation 12 Hume Hume's Fork, uniformity principle of nature, custom principle, chimera, copy principle and idea of 'No necessary connection' 13 Shepherd Vision argument, Uncaused Objection 14 Kant and Part II Conclusion Intro to Immanuel Kant and Conclusion of 18-th century 15-16 Presentation 3 mins talks by students"},{"location":"other/SS149/#assessment","title":"Assessment","text":"<p>As a social science course, the assessment mainly includes the following: - Attendance: see if you learn something from the class - Essay: see if you acquire the ability to think critically like a analytic philosopher - Presentation: see if you can explain your thoughts logically</p>"},{"location":"other/SS149/#essay","title":"Essay","text":"<p>For more details, see Essay Questions.</p> <p>Choose exactly one question from the list of questions and critically evaluate the question. The evaluation should be based on the following criteria: - Identify the premises and conclusion of thoughts, and provides a construction of the argument. - Check the validity and soundness of the argument, and evaluate it. - Determine one possible weakness of the argument and provide an objection. - Provide a response to the objection, i.e., defend the argument or revise it.</p>"},{"location":"other/SS149/#presentation","title":"Presentation","text":"<p>The talks should cover another question from the list, and similar structure as the essay.</p>"},{"location":"other/SWS/","title":"NUS SoC Summer Workshop 2024","text":"<p>Offcial website: https://sws.comp.nus.edu.sg/</p> <p>The summer workshop is orgranized by NUS School of Computing, intended for freshman and sophomore students to learn more about computer science and software engineering through a hands-on project. As descibed by the person in charge, it's also a qualifier for NGNE programme of NUS SoC.</p>"},{"location":"other/SWS/#content","title":"Content","text":"<p>There is one cluster for freshman, X-cluster, and two for sophomores, Cloud, Security, IoT &amp; AI and Media, Analytics &amp; AI. I was selected to join the former one.</p>"},{"location":"other/SWS/#courses","title":"Courses","text":"Course Instructor Description Artificial Intelligence of Things Dr. Tan Wee Kek Edge computing and embedded computer (robotics) combined with algorithms Cloud Computing with Big Data Dr. Richard T. B. Ma Kubernetes, server and container Visual Computing Dr. Terence Tim Computer vision and pattern recognition Defence of the Ancient Dr. Hugh Anderson Cybersecurity Robotics Dr. Boyd Anderson Building and programming robots Deep Learning Dr. Colin Tan Neural networks, integrated into Robotics <p>I was involved in the course of DOTA.</p>"},{"location":"other/SWS/#project","title":"Project","text":"<p>Our project is to explore the attack of GoFetch from Apple Silicon chips.</p>"},{"location":"tools/docker/","title":"Docker","text":""},{"location":"tools/git/","title":"Git","text":""},{"location":"tools/latex/","title":"LaTeX","text":""},{"location":"tools/linux/","title":"Linux","text":""},{"location":"tools/markdown/","title":"Markdown","text":""},{"location":"tools/vim/","title":"Vim","text":""},{"location":"zh/","title":"Welcome to my notes","text":"<p>Warning</p> <p>\u672cwiki\u4ecd\u5728\u5efa\u8bbe\u4e2d\u3002\u656c\u8bf7\u671f\u5f85</p>"},{"location":"zh/#_1","title":"\u7b80\u4ecb","text":"<p>\u8fd9\u662f\u4e00\u4efd\u5357\u79d1\u5927\u8ba1\u7b97\u673a\u7cfb\u7684\u81ea\u5b66/\u590d\u4e60\u8d44\u6599\uff0c\u4e5f\u662f\u6211\u7684\u8bfe\u7a0b\u8d44\u6599\u5907\u4efd\u3002</p> <p>\u59ae\u53ef\u8ba1\u7cfb\u7684\u8bfe\u5bf9\u96f6\u57fa\u7840\u7684\u540c\u5b66\u6765\u8bf4\u8fc7\u96be\uff0c\u4f46\u5bf9\u60f3\u8ba4\u771f\u5b66\u4e60\u8ba1\u7b97\u673a\u7684\u540c\u5b66\u6765\u8bf4\u53c8\u6709\u70b9\u4e0d\u591f\u3002\u4f46\u662f\uff0c\u53ea\u8981\u4f60\u6709\u4e00\u5b9a\u7684\u81ea\u5b66\u80fd\u529b\uff0c\u8fd9\u4e9b\u8bfe\u7a0b\u90fd\u662f\u53ef\u4ee5\u81ea\u5b66\u7684\u3002</p> <p>Note</p> <p>\u7531\u4e8e\u672c\u4eba\u5bf9\u7cfb\u7edf\u548c\u5b89\u5168\u6bd4\u8f83\u611f\u5174\u8da3\uff0c\u6211\u5e76\u4e0d\u6253\u7b97\u9009\u4eba\u5de5\u667a\u80fd\u76f8\u5173\u7684\u9009\u4fee\u8bfe\uff0c\u5982\u667a\u80fd\u673a\u5668\u4eba(CS401)\uff0c\u673a\u5668\u5b66\u4e60(CS405)\u7b49\u3002 \u8bf7\u53c2\u8003\u5176\u4ed6\u540c\u5b66\u7684\u4ed3\u5e93\uff0c\u6216\u8005\u5982\u679c\u4f60\u613f\u610f\u8d21\u732e\uff0c\u8bf7\u76f4\u63a5\u63d0PR\u3002</p>"},{"location":"zh/#_2","title":"\u7ed3\u6784","text":"<p>\u672cwiki\u6309\u7167\u57f9\u517b\u65b9\u6848\u7684\u8bfe\u7a0b\u7b49\u7ea7\u5212\u5206\uff0c\u5206\u4e3a\u57fa\u7840\u8bfe\u3001\u6838\u5fc3\u8bfe\u548c\u9009\u4fee\u8bfe\u3002</p> <ul> <li>\u57fa\u7840\u8bfe\uff1a\u6570\u5b66\u3001\u8ba1\u7b97\u673a\u5e95\u5c42\u539f\u7406\u3001\u7f16\u7a0b\u548c\u6570\u636e\u7ed3\u6784\u8bfe</li> <li>\u6838\u5fc3\u8bfe\uff1a\u7b97\u6cd5\u3001\u7cfb\u7edf\u548c\u8f6f\u4ef6\u5de5\u7a0b\u8bfe</li> <li>\u9009\u4fee\u8bfe\uff1a\u8ba1\u7b97\u673a\u7406\u8bba\u3001\u5b89\u5168\u548c\u4eba\u5de5\u667a\u80fd\u8bfe</li> </ul> <p>\u5927\u90e8\u4efd\u4f5c\u4e1a\u7528 Typst \u6216 \\(\\LaTeX\\) \u7f16\u5199\u3002Markdown\u4f60\u8c01</p> <p>\u8bfe\u7a0b\u7b14\u8bb0\u5728\u6211\u7684\u535a\u5ba2\u3002 \u6446\u4e86\uff0c\u76ee\u524d\u4ec0\u4e48\u90fd\u6ca1\u5199</p>"},{"location":"zh/#wiki","title":"\u5982\u4f55\u7528\u8fd9\u4e2awiki\u5b66\u4e60","text":"<p>Note</p> <p>\u5982\u679c\u60f3\u4e0b\u8f7d\u7279\u5b9a\u7684\u8bfe\u7a0b\u6216\u6587\u4ef6\u5939, \u53ef\u4ee5\u4f7f\u7528 Downgit</p> <p>TBD</p>"}]}